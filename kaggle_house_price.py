# import os
# import sys

# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# import plotly.express as px
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
# # from sklearn.preprocessing import OneHotEncoder, StandardScaler
# # from sklearn.compose import ColumnTransformer
# # from sklearn.pipeline import Pipeline
# # from catboost import CatBoostRegressor
# import streamlit as st
# from PIL import Image
# # from my_module import LotFrontageImputer
# from category_encoders import OrdinalEncoder
# from sklearn.ensemble import RandomForestRegressor
# from sklearn.model_selection import train_test_split
# import pickle

# from shapash import SmartExplainer
# from shapash.data.data_loader import data_loading
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from PIL import Image
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import pickle
from sklearn.impute import SimpleImputer 

# train = pd.read_csv("./house-prices-advanced-regression-techniques/train.csv")


# Browse model !!!
def load_model():
    with open("house_pricing_pipeline.pkl", "rb") as file:
        model = pickle.load(file)
    return model


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(data):
    model = load_model()
    prediction = model.predict(data)
    return prediction

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
def compute_metrics(y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    return rmse, mae, r2


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(file):
    data = pd.read_csv(file)
    return data



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è EDA
def exploratory_data_analysis(data):
    st.write(data.head())




# –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
def show_main_info():
    st.markdown("""
                <h1 style='color: #FE5F55; text-align: center; 
                padding: 20px; font-size: 36px; background-color: #F0F6F7FF;'>
                üè†üìà –ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å üìâüè†
                </h1>
                """, unsafe_allow_html=True)
    
    background_image_path = "https://media.istockphoto.com/id/1288957751/vector/traditional-european-style-houses-in-old-town-neighborhood-suburban-traditional-street.jpg?s=612x612&w=0&k=20&c=ldiv_9BlStJdCK95gDCjvG7cwZzeuRmUBHMsZBvl26Y="
    st.image(background_image_path, caption='', use_column_width=True)


    

    st.write("## –≠—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞")

    st.write("–í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –Ω–∞ Kaggle [House Prices: Advanced Regression Techniques](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/overview).")
    
    
    st.write("### 1. –ò–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    st.write("- –ó–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é, –ø–æ –º–æ–¥–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–ª–±—Ü—ã - –Ω—É–ª—è–º–∏;")
    st.write("- –£–¥–∞–ª–∏–ª–∏ —Ñ–∏—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç—å—é;")
    st.write("- –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤;")
    st.write("- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é StandardScaler, OneHotEncoder –∏ OrdinalEncoder")

    st.write("### 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    st.write("–ú—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
    st.write("- LinearRegression")
    st.write("- GradientBoostingRegressor")
    st.write("- CatBoostRegressor")
    st.write("- RandomForestRegressor")
    st.write("- LGBMRegressor")
    st.write("- XGBRegressor")
    st.write("- VotingRegressor")

    st.write("### 5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.write("–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ CatBoost.")
    image = Image.open('feature_importance_plot.png')
    st.image(image, caption='Feature Importance Plot', use_column_width=True)
    st.write("-")

    st.write("### 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ [Kaggle](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/data)")
    st.write("471 –º–µ—Å—Ç–æ –≤ Kaggle")
    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ Kaggle: 0.12355")

   

    st.write("## –ö–æ–º–∞–Ω–¥–∞")
    st.write("- [Igor Svilanovich](https://github.com/himimori)")
    st.write("- [Andrei Miroshnichenko](https://github.com/Andriano2323)")
    st.write("- [Saiyyna Antonova](https://github.com/SainaAntonova)")
    


    

# –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.sidebar.title('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')
page = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ì–ª–∞–≤–Ω–∞—è", "–ü—Ä–æ–≥–Ω–æ–∑", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"])


if page == "–ì–ª–∞–≤–Ω–∞—è":
    show_main_info()


elif page == "–ü—Ä–æ–≥–Ω–æ–∑":
    st.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∂–∏–ª—å–µ')
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∂–∏–ª—å–µ!")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∂–∏–ª—å–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞—Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")
    st.write("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–∏ÃÜ–ª", type=["csv"])
    
    if uploaded_file is not None:
        data = load_data(uploaded_file)
        st.write("–î–∞–Ω–Ω—ã–µ —Ñ–∞–∏ÃÜ–ª–∞:")
        st.write(data.head())
        
        prediction = predict(data)
        st.write("–ü—Ä–æ–≥–Ω–æ–∑:")
        st.write(prediction)


        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        show_metrics = st.checkbox("–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
        if show_metrics:
            y_true = st.text_input("–í–≤–µ–¥–∏—Ç–µ y_true", value="")
            y_true = np.array([float(x.strip()) for x in y_true.split(",") if x.strip()])
            rmse, mae, r2 = compute_metrics(y_true, prediction)
            st.write("RMSE:", rmse)
            st.write("MAE:", mae)
            st.write("R2 Score:", r2)

elif page == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
    st.title('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö')
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∂–∏–ª—å–µ!")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∂–∏–ª—å–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞—Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.")
    st.write("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–∏ÃÜ–ª", type=["csv"])

    if uploaded_file is not None:
        data = load_data(uploaded_file)
        st.write("–î–∞–Ω–Ω—ã–µ —Ñ–∞–∏ÃÜ–ª–∞:")
        st.write(data.head())
        st.write(data.describe().T)

        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plot_options = ["Bar plot", "Scatter plot", "Histogram", "Box plot", 'Heatmap']
        selected_plot = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫", plot_options)
        
        if selected_plot == "Bar plot":
            x_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ x-axis", data.columns)
            y_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ y-axis", data.columns)
            st.write("Bar plot:")
            fig, ax = plt.subplots()
            sns.barplot(x=data[x_axis], y=data[y_axis], ax=ax)
            ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha="right")  
            st.pyplot(fig)
            
        elif selected_plot == "Scatter plot":
            x_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ x-axis", data.columns)
            y_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ y-axis", data.columns)
            st.write("Scatter plot:")
            fig, ax = plt.subplots()
            sns.scatterplot(x=data[x_axis], y=data[y_axis], ax=ax)
            st.pyplot(fig)
            
        elif selected_plot == "Histogram":
            column = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É", data.columns)
        
            st.write("Histogram:")
            fig, ax = plt.subplots()
            sns.histplot(data[column], ax=ax)
            st.pyplot(fig)

        elif selected_plot == "Box plot":
            x_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ x-axis", data.columns)
            y_axis = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ y-axis", data.columns)
            st.write("Box plot:")
            fig, ax = plt.subplots()
            sns.boxplot(x=data[x_axis], y=data[y_axis], ax=ax)
            st.pyplot(fig)
        elif selected_plot == 'Heatmap':
            numeric_data = data.select_dtypes(include=[np.number])
            fig = px.imshow(numeric_data.corr())
            fig.update_layout(title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", xaxis_title="–ü—Ä–∏–∑–Ω–∞–∫–∏", yaxis_title="–ü—Ä–∏–∑–Ω–∞–∫–∏")
            st.plotly_chart(fig)
